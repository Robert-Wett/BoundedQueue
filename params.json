{"name":"Boundedqueue","tagline":"ActionScript 3 Bounded Queue","body":"AS3 Bounded Queue\r\n============\r\n\r\n#### An ActionScript 3 Bounded Queue Implementation\r\n\r\nImplements a FIFO queue that is optionally capacity bound.  The queue also enforces type safety for all entries by designating the queue object class type in the constructor.  ActionScript 3 does not intrinsically support templates/generics other than the `Vector` class but this convention serves the same purpose for this object.\r\n\r\n\r\n##### Example usage:\r\n\r\n\t// Create a FIFO queue of <code>Person</code> objects that can \r\n\t// only contain 2 entrees at a given time with no default comparator.\r\n\tvar fnComp : FullNameComparator = new FullNameComparator();           \r\n\tvar lnCmp  : LastNameComparator = new LastNameComparator();\r\n\tvar queue  : BoundedQueue       = new BoundedQueue(Person, 2);\r\n\tqueue.put(new Person(\"Bart\", \"Gunn\"));\r\n\tqueue.put(new Person(\"Ted\",  \"Gunn\"));\r\n\t        \r\n\tvar search : Person = new Person(\"Bart\", \"Gunn\");\r\n\tvar result : Person = queue.find(search, fnComp) as Person;\r\n\t// Trace \"Bart Gunn\" to the console.\r\n\ttrace(result.first + \" \" + result.last);\r\n\t        \r\n\tvar results : Array = queue.findAllMatching(search, fnComp);\r\n\t// Trace \"# of entries in queue: 1\" to the console.\r\n\ttrace(\"# of entries in queue: \" + results.length);\r\n\t// Trace \"Bart Gunn\" to the console.\r\n\ttrace((results[0] as Person).first + \" \" + (results[0] as Person).last);\r\n\t        \r\n\tresults = queue.findAllMatching(search, lnCmp);\r\n\t// Trace \"# of entries in queue: 2\" to the console.\r\n\ttrace(\"# of entries in queue: \" + results.length);\r\n\t// Trace \"Bart Gunn\" to the console.\r\n\ttrace((results[0] as Person).first + \" \" + (results[0] as Person).last);\r\n\t// Trace \"Ted Gunn\" to the console.\r\n\ttrace((results[1] as Person).first + \" \" + (results[1] as Person).last);\r\n\t        \r\n\tqueue.drainToValue(search, fnComp);\r\n\t// Trace \"# of entries in queue: 2\" to the console.\r\n\ttrace(\"# of entries in queue: \" + results.length);\r\n\t// Trace \"Bart Gunn\" to the console.\r\n\ttrace((queue.peek() as Person).first + \" \" + (queue.peek() as Person).last);\r\n\t        \r\n\tvar take : Person = queue.take() as Person;\r\n\t// Trace \"Ted Gunn\" to the console.\r\n\ttrace((queue.peek() as Person).first + \" \" + (queue.peek() as Person).last);\r\n\t// Trace \"Bart Gunn\" to the console.\r\n\ttrace(take.first + \" \" + take.last);    \r\n\t// Trace \"# of entries in queue: 1\" to the console.\r\n\ttrace(\"# of entries in queue: \" + results.length);\r\n\t        \r\n\tresult = queue.put(take);\r\n\t// Traces \"# of entries in queue: 2\" to the console.\r\n\ttrace(\"# of entries in queue: \" + results.length);\r\n\t// Trace \"Bart Gunn\" to the console.\r\n\ttrace(result.first + \" \" + result.last);\r\n\t// Trace \"Ted Gunn\" to the console.\r\n\ttrace((queue.peek() as Person).first + \" \" + (queue.peek() as Person).last);\r\n\t        \r\n\tresults = queue.drainToSize(1);\r\n\t// Trace \"# of entries in queue: 1\" to the console.\r\n\ttrace(\"# of entries in queue: \" + results.length);\r\n\t// Trace \"Bart Gunn\" to the console.\r\n\ttrace((results[0] as Person).first + \" \" + (results[0] as Person).last);\r\n\t// Trace \"Ted Gunn\" to the console.\r\n\ttrace((queue.peek() as Person).first + \" \" + (queue.peek() as Person).last);\r\n\t        \r\n\tqueue.clear();\r\n\t// Trace \"# of entries in queue: 1\" to the console.\r\n\ttrace(\"# of entries in queue: \" + results.length);\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}